@authors: M.Chetoui, P.Beaurepaire, M.Morvan and A.Vacavant. Institut Pascal, University of Clermont Avergne

This is a new open-source pipeline that enables users to compute liver perfusion properties at both micro- and macro-scales. Notably, this is the first open-source pipeline published for such an application, and the uniqueness of this work lies in the coupling method presented here. We hope that it will be a valuable tool for researchers and practitioners in diagnosing and treating liver diseases.

***************************************************** Required Features *******************************************************


First and foremost, users must have defined two extensive vascular trees: one for the Portal Vein (PV) and the other for the Hepatic Vein (HV). These trees can be extracted from medical images. Users are required to specify both the connectivity table for each tree and the geometrical properties of each segment within these trees, including the coordinates of the nodes and their diameters. This information should be saved in the 'E1D' directory. An example of the information for these two trees is provided within this pipeline, available in the 'E1D' directory.


Secondly, the user needs to create a virtual network for the small vessels within each tree. The pipeline is designed to work with the .xml output generated by the OpenCCO project [1], which allows us to generate a virtual, anatomically accurate vascularization tree based on a given geometry. The .xml file for each tree should be saved in the 'E3D/CCO' directory. Two examples of the .xml files obtained from OpenCCO are provided in the 'E3D/CCO' directory: one for the PV and the other for the HV.



a finite element model of a Darcy multicompartment medium. Within the pipeline, we offer two FreeFeM++ [2] scripts, which are saved in the 'FE_model' directory. These provided scripts are designed to operate with a predefined mesh file named 'Liver.Mesh.' Please note that using a different mesh file would require significant modifications to the scripts, particularly in the boundary conditions and result writing procedures. Alternatively, users have the option to employ other open-source or commercial software for finite element simulations.



*************************************************** How it works ?**************************************************************
 
Here are the steps, presented in a clear and concise manner:

1-Execute the script "E3D/Main3D.py."

2-Compute the finite element model by running the script "FE_model/Darcy_simulation.edp."

3-Run the script "Compute.py" to obtain velocity and pressure values at the nodes of the large vessel trees.

4-If you wish to visualize the final spatial distribution of pressures and velocities within the liver, you need to compute the finite element model by running the script "FE_model/Final_simulation.edp."





Here's a more detailed explanation of the scientific and technical backgrounds, broken down into steps:

1-Processing Virtual Trees and Compartmentalization:

*Once you have prepared the .xml files from OpenCCO, the script "E3D/Main3D.py" will process these virtual trees.
*It divides the model into compartments and computes the permeability of each compartment, along with the coupling coefficients.
*The results are saved in the "E3D/Parametrization" directory.
*Additional outputs can be found in "E3D/CCO/Trees_properties" in .txt format for properties and "E3D/CCO/VTK_visualization" in .vtk format for visualization using Paraview [3].



2-3D Finite Element Model Computation:

*The script "FE_model/Darcy_simulation.edp" utilizes the multicompartment properties located in the "E3D/Parametrization" directory.
*It uses these properties to compute the finite element model, generating a matrix that relates velocities and pressures of the 1D terminal nodes in the two 1D trees.
*Prior to running this model, ensure that the "FE_model/Darcy.txt" file exists and is empty.
*The resulting matrix is saved in this file.




3-1D and 3D Tree Blood Circulation Coupling:

*The script "Compute.py" couples the 1D and 3D tree blood circulations using continuity equations, Bernoulli equations, and the Darcy matrix obtained in the previous step.
*To establish the coupling system, this script searches for the files containing 1D tree properties in the "E1D" directory and the "FE_model/Darcy.txt" file.
*The system is solved, and the outputs include pressure and velocity data for each 1D tree, which are saved in the "Final_1D_results" directory.



4-Running the Final Simulation:

*Before executing the script "FE_model/Final_simulation.edp," ensure that each boundary condition is accurately defined.
*Boundary conditions are set at the terminal nodes of the 1D trees, which are identified by external surfaces in the Liver mesh. Each surface is assigned an index.
*The boundary pressure values used in the script are obtained in the third step.
*The script generates .txt files containing spatial distributions of pressure and velocities for each compartment, saved in the "FE_model/Txt_results" directory.
*Additionally, to visualize these results, the script saves .vtk files in the "FE_model/Vtk_visualisation_files" directory.


************************************************** Attention! *****************************************************************

1- To the units!
2- To the boundary conditions and the index of each external surface.
3- To the connectivity and the properties of the 1D trees.


************************************************** Enjoy ! ************************************************************************

References:

[1] Bertrand Kerautret, Phuc Ngo, Nicolas Passat, Hugues Talbot, Clara Jaquet. OpenCCO: An Implementation of Constrained Constructive Optimization for Generating 2D and 3D Vascular Trees. Image Processing On Line, In press. ⟨hal-04201337⟩

[2] HECHT, Frédéric. New development in FreeFem++. Journal of numerical mathematics, 2012, vol. 20, no 3-4, p. 251-266.

[3] James Ahrens, Berk Geveci, and Charles Law. “ParaView: An End-User Tool for Large Data Visualization.” In Visualization Handbook. Elesvier, 2005. ISBN 978-0123875822.
